# .github/workflows/fetch-cricket-data.yml
# Fixed version with proper YAML formatting

name: "Fetch Cricket Data"

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        
      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: "Install dependencies"
        run: |
          pip install requests
          
      - name: "Fetch and process cricket data"
        run: |
          mkdir -p data
          
          cat > fetch_cricket.py << 'EOF'
          import requests
          import json
          import os
          from datetime import datetime
          
          def filter_cricket_data(api_response):
              filtered_matches = []
              
              for match in api_response.get('result_summary', []):
                  essential_info = {
                      'match_date': match.get('match_date'),
                      'home_club_name': match.get('home_club_name'),
                      'away_club_name': match.get('away_club_name'),
                      'home_team_name': match.get('home_team_name'),
                      'away_team_name': match.get('away_team_name'),
                      'ground_name': match.get('ground_name'),
                      'result_description': match.get('result_description'),
                      'competition_name': match.get('competition_name'),
                      'competition_type': match.get('competition_type')
                  }
                  
                  match_format = {
                      'match_type': match.get('match_type'),
                      'game_type': match.get('game_type'),
                      'no_of_overs': match.get('no_of_overs'),
                      'season': '2025'
                  }
                  
                  innings_data = []
                  for innings in match.get('innings', []):
                      innings_data.append({
                          'team_batting_id': innings.get('team_batting_id'),
                          'innings_number': innings.get('innings_number'),
                          'runs': innings.get('runs'),
                          'wickets': innings.get('wickets'),
                          'overs': innings.get('overs'),
                          'total_extras': innings.get('total_extras')
                      })
                  
                  match_status = {
                      'status': match.get('status'),
                      'last_updated': match.get('last_updated'),
                      'toss': match.get('toss')
                  }
                  
                  filtered_match = {
                      'match_id': match.get('id'),
                      **essential_info,
                      **match_format,
                      **match_status,
                      'innings': innings_data
                  }
                  
                  filtered_matches.append(filtered_match)
              
              return {
                  'total_matches': len(filtered_matches),
                  'last_updated': datetime.now().isoformat(),
                  'fetch_timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
                  'matches': filtered_matches
              }
          
          def main():
              try:
                  print("Fetching cricket data...")
                  
                  url = 'http://play-cricket.com/api/v2/result_summary.json?site_id=1786&season=2025&api_token=8786d7c44061b7d624367d32177420e0'
                  headers = {
                      'User-Agent': 'CricketDataBot/1.0',
                      'Accept': 'application/json'
                  }
                  
                  response = requests.get(url, headers=headers, timeout=30)
                  response.raise_for_status()
                  
                  raw_data = response.json()
                  print(f"Fetched {len(raw_data.get('result_summary', []))} matches")
                  
                  with open('data/raw_cricket_data.json', 'w') as f:
                      json.dump(raw_data, f, indent=2)
                  
                  filtered_data = filter_cricket_data(raw_data)
                  
                  with open('data/cricket_data.json', 'w') as f:
                      json.dump(filtered_data, f, indent=2)
                  
                  latest_matches = []
                  for match in filtered_data['matches'][:5]:
                      latest_matches.append({
                          'date': match['match_date'],
                          'home_team': f"{match['home_club_name']} {match['home_team_name']}",
                          'away_team': f"{match['away_club_name']} {match['away_team_name']}",
                          'result': match['result_description'],
                          'competition': match['competition_name'] or 'Friendly'
                      })
                  
                  summary = {
                      'last_updated': filtered_data['last_updated'],
                      'total_matches': filtered_data['total_matches'],
                      'latest_matches': latest_matches
                  }
                  
                  with open('data/summary.json', 'w') as f:
                      json.dump(summary, f, indent=2)
                  
                  with open('data/last_update.txt', 'w') as f:
                      f.write(f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
                      f.write(f"Total matches: {filtered_data['total_matches']}\n")
                      f.write(f"Status: Success\n")
                  
                  print(f"Successfully processed {filtered_data['total_matches']} matches")
                  
              except Exception as e:
                  print(f"Error: {e}")
                  with open('data/last_update.txt', 'w') as f:
                      f.write(f"Last attempted: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n")
                      f.write(f"Status: Failed\n")
                      f.write(f"Error: {str(e)}\n")
                  exit(1)
          
          if __name__ == "__main__":
              main()
          EOF
          
          python fetch_cricket.py
          
      - name: "Commit changes"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add data/
            git commit -m "Update cricket data - $(date)"
            git push
            echo "Data updated"
          else
            echo "No changes to commit"
          fi

---

# Alternative: Minimal version for testing
# Use this if the above still fails

name: "Test Cricket Fetch"

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: "Test fetch"
        run: |
          mkdir -p data
          curl -o data/test.json "http://play-cricket.com/api/v2/result_summary.json?site_id=1786&season=2025&api_token=8786d7c44061b7d624367d32177420e0"
          echo "Fetch completed"
          
      - name: "Commit test"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          git commit -m "Test cricket data fetch" || echo "No changes"
          git push || echo "Nothing to push"

---

# TROUBLESHOOTING CHECKLIST:

# 1. FILE LOCATION - Must be exactly:
#    .github/workflows/fetch-cricket-data.yml

# 2. YAML VALIDATION - Check online at:
#    https://yamlchecker.com/

# 3. GITHUB PERMISSIONS - In repo settings:
#    Settings > Actions > General > Workflow permissions
#    Select: "Read and write permissions"

# 4. BRANCH NAME - Make sure it matches your default branch:
#    Change 'main' to 'master' if needed

# 5. MANUAL TRIGGER - Test with:
#    Actions tab > Select workflow > "Run workflow"

# 6. CHECK LOGS - If it fails:
#    Actions tab > Click failed run > Click job > View logs
